/** @jsxImportSource @systembug/wsx-core */
/**
 * WSX Framework 官网 - 基于Vue.js设计风格
 *
 * 特性：
 * - Vue.js风格的Hero区域
 * - 三列特性展示
 * - 响应式设计
 * - 现代化交互效果
 */

import { WebComponent, autoRegister } from "@systembug/wsx-core";
import styles from "./App.css?inline";

export interface AppConfig {
    title?: string;
    theme?: "light" | "dark";
}

@autoRegister({ tagName: "wsx-app" })
export default class App extends WebComponent {
    private appTitle: string = "WSX Framework";
    private appTheme: "light" | "dark" = "light";

    constructor(config: AppConfig = {}) {
        super({
            styles,
            styleName: "wsx-app",
            ...config,
        });

        this.appTitle = config.title || "WSX Framework";
        this.appTheme = config.theme || "light";
    }

    render(): HTMLElement {
        return (
            <div class="app-container">
                {/* 主题切换器 */}
                <theme-switcher></theme-switcher>

                {/* Hero区域 */}
                {this.renderHero()}

                {/* 特性展示区域 */}
                {this.renderFeatures()}

                {/* 快速开始区域 */}
                {this.renderQuickStart()}

                {/* 示例展示区域 */}
                {this.renderExamples()}

                {/* 页脚 */}
                {this.renderFooter()}
            </div>
        );
    }

    /**
     * 渲染Hero区域 - Vue.js风格
     */
    private renderHero(): HTMLElement {
        return (
            <section class="hero-section">
                <div class="hero-background">
                    <div class="hero-pattern"></div>
                </div>

                <div class="hero-content">
                    <h1 class="hero-title">
                        <span class="title-main">WSX Framework</span>
                        <span class="title-subtitle">The Progressive Web Components Framework</span>
                    </h1>

                    <p class="hero-description">
                        An approachable, performant and versatile framework for building native web
                        components with JSX syntax.
                    </p>

                    <div class="hero-actions">
                        <button class="btn-primary" onClick={this.scrollToQuickStart}>
                            <svg-icon
                                name="play"
                                size="18"
                                color="white"
                                style="margin-right: 8px;"
                            ></svg-icon>
                            Get Started
                        </button>

                        <button class="btn-secondary" onClick={this.openGitHub}>
                            <svg-icon
                                name="github"
                                size="18"
                                color="currentColor"
                                style="margin-right: 8px;"
                            ></svg-icon>
                            GitHub
                        </button>

                        <button class="btn-ghost" onClick={this.openExamples}>
                            <svg-icon
                                name="star"
                                size="18"
                                color="currentColor"
                                style="margin-right: 8px;"
                            ></svg-icon>
                            Examples
                        </button>
                    </div>
                </div>
            </section>
        );
    }

    /**
     * 渲染特性展示区域 - 三列布局
     */
    private renderFeatures(): HTMLElement {
        const features = [
            {
                title: "Approachable",
                description:
                    "Builds on top of standard Web Components with intuitive JSX syntax and world-class TypeScript support.",
                icon: "🎯",
                color: "green",
            },
            {
                title: "Performant",
                description:
                    "Zero dependencies, native DOM operations, and compiler-optimized rendering system that rarely requires manual optimization.",
                icon: "⚡",
                color: "blue",
            },
            {
                title: "Versatile",
                description:
                    "A rich, incrementally adoptable ecosystem that scales from simple components to full-featured applications.",
                icon: "🔧",
                color: "purple",
            },
        ];

        return (
            <section class="features-section">
                <div class="features-grid">
                    {features.map((feature, index) => (
                        <div class={`feature-card feature-${feature.color}`} key={index}>
                            <div class="feature-icon">{feature.icon}</div>
                            <h3 class="feature-title">{feature.title}</h3>
                            <p class="feature-description">{feature.description}</p>
                        </div>
                    ))}
                </div>
            </section>
        );
    }

    /**
     * 渲染快速开始区域
     */
    private renderQuickStart(): HTMLElement {
        return (
            <section id="quick-start" class="quick-start-section">
                <div class="container">
                    <h2 class="section-title">Quick Start</h2>
                    <p class="section-description">
                        Get started with WSX Framework in minutes. Create your first web component
                        with JSX syntax.
                    </p>

                    <div class="code-example">
                        <div class="code-header">
                            <span class="code-title">Installation</span>
                            <button class="copy-btn" onClick={this.copyCode}>
                                📋 Copy
                            </button>
                        </div>
                        <pre class="code-block">
                            <code>{`npm install @systembug/wsx-core

# Create your first component
import { WebComponent } from '@systembug/wsx-core';

class MyButton extends WebComponent {
    render() {
        return <button>Hello WSX!</button>;
    }
}`}</code>
                        </pre>
                    </div>
                </div>
            </section>
        );
    }

    /**
     * 渲染示例展示区域
     */
    private renderExamples(): HTMLElement {
        return (
            <section class="examples-section">
                <div class="container">
                    <h2 class="section-title">Interactive Examples</h2>
                    <p class="section-description">
                        Explore WSX Framework capabilities with these interactive examples.
                    </p>

                    <div class="examples-grid">
                        <div class="example-card">
                            <h3>SVG Graphics</h3>
                            <p>Native SVG support with namespace handling</p>
                            <div class="example-demo">
                                <svg-demo></svg-demo>
                            </div>
                        </div>

                        <div class="example-card">
                            <h3>Color Picker</h3>
                            <p>Custom web component with color selection</p>
                            <div class="example-demo">
                                <color-picker></color-picker>
                            </div>
                        </div>

                        <div class="example-card">
                            <h3>Button Components</h3>
                            <p>Various button styles and states</p>
                            <div class="example-demo">
                                <div class="button-demo">
                                    <xy-button type="primary">Primary</xy-button>
                                    <xy-button type="danger">Danger</xy-button>
                                    <xy-button type="flat">Flat</xy-button>
                                    <xy-button disabled>Disabled</xy-button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        );
    }

    /**
     * 渲染页脚
     */
    private renderFooter(): HTMLElement {
        return (
            <footer class="footer">
                <div class="container">
                    <div class="footer-content">
                        <div class="footer-section">
                            <h3>WSX Framework</h3>
                            <p>The Progressive Web Components Framework</p>
                        </div>

                        <div class="footer-section">
                            <h4>Resources</h4>
                            <ul>
                                <li>
                                    <a href="#" onClick={this.openDocs}>
                                        Documentation
                                    </a>
                                </li>
                                <li>
                                    <a href="#" onClick={this.openGitHub}>
                                        GitHub
                                    </a>
                                </li>
                                <li>
                                    <a href="#" onClick={this.openExamples}>
                                        Examples
                                    </a>
                                </li>
                            </ul>
                        </div>

                        <div class="footer-section">
                            <h4>Community</h4>
                            <ul>
                                <li>
                                    <a href="#" onClick={this.openDiscord}>
                                        Discord
                                    </a>
                                </li>
                                <li>
                                    <a href="#" onClick={this.openTwitter}>
                                        Twitter
                                    </a>
                                </li>
                                <li>
                                    <a href="#" onClick={this.openBlog}>
                                        Blog
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>

                    <div class="footer-bottom">
                        <p>&copy; 2024 WSX Framework. Released under the MIT License.</p>
                    </div>
                </div>
            </footer>
        );
    }

    // 事件处理方法
    private scrollToQuickStart = (): void => {
        const element = document.getElementById("quick-start");
        if (element) {
            element.scrollIntoView({ behavior: "smooth" });
        }
    };

    private openGitHub = (): void => {
        window.open("https://github.com/systembug/wsx-framework", "_blank");
    };

    private openExamples = (): void => {
        this.scrollToQuickStart();
    };

    private copyCode = (): void => {
        const codeBlock = document.querySelector(".code-block code");
        if (codeBlock) {
            navigator.clipboard.writeText(codeBlock.textContent || "");
            // 显示复制成功提示
            const copyBtn = document.querySelector(".copy-btn");
            if (copyBtn) {
                copyBtn.textContent = "✅ Copied!";
                setTimeout(() => {
                    copyBtn.textContent = "📋 Copy";
                }, 2000);
            }
        }
    };

    private openDocs = (): void => {
        window.open("https://wsx-framework.dev/docs", "_blank");
    };

    private openDiscord = (): void => {
        window.open("https://discord.gg/wsx-framework", "_blank");
    };

    private openTwitter = (): void => {
        window.open("https://twitter.com/wsx_framework", "_blank");
    };

    private openBlog = (): void => {
        window.open("https://wsx-framework.dev/blog", "_blank");
    };

    /**
     * 组件连接到DOM后的初始化
     */
    protected onConnected(): void {
        // 添加滚动监听
        window.addEventListener("scroll", this.handleScroll);
    }

    /**
     * 组件从DOM断开时的清理
     */
    protected onDisconnected(): void {
        window.removeEventListener("scroll", this.handleScroll);
    }

    /**
     * 处理滚动事件
     */
    private handleScroll = (): void => {
        const scrolled = window.scrollY;
        const hero = document.querySelector(".hero-section") as HTMLElement;

        if (hero) {
            // 添加视差滚动效果
            hero.style.transform = `translateY(${scrolled * 0.5}px)`;
        }
    };
}
