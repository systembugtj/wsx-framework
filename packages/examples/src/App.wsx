/**
 * Main App Component - WSX Framework Example Application
 *
 * This component demonstrates how to build a complete application
 * using WSX Framework with TypeScript and JSX syntax.
 */

import { WebComponent, autoRegister, createLogger } from '@systembug/wsx-core';
import './components/XyButton.wsx';
import './components/XyButtonGroup.wsx';
import './components/ColorPicker.wsx';

const logger = createLogger('App');

@autoRegister({ tagName: 'wsx-app' })
export default class App extends WebComponent {
  private currentSection: string = 'overview';

  constructor() {
    super({
      styles: `
                :host {
                    display: block;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                    line-height: 1.6;
                    color: #333;
                }
                
                .app-container {
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 20px;
                }
                
                .header {
                    text-align: center;
                    margin-bottom: 40px;
                    padding: 40px 20px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border-radius: 12px;
                    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
                }
                
                .header h1 {
                    margin: 0;
                    font-size: 3rem;
                    font-weight: 700;
                    letter-spacing: -1px;
                }
                
                .header p {
                    margin: 10px 0 0 0;
                    font-size: 1.2rem;
                    opacity: 0.9;
                }
                
                .navigation {
                    display: flex;
                    gap: 10px;
                    margin-bottom: 30px;
                    flex-wrap: wrap;
                    justify-content: center;
                }
                
                .section {
                    background: white;
                    padding: 30px;
                    border-radius: 8px;
                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                    margin-bottom: 20px;
                }
                
                .section h2 {
                    margin-top: 0;
                    color: #667eea;
                    font-size: 1.8rem;
                }
                
                .demo-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin: 20px 0;
                }
                
                .demo-item {
                    padding: 20px;
                    border: 2px solid #f0f0f0;
                    border-radius: 8px;
                    background: #fafafa;
                }
                
                .demo-item h3 {
                    margin-top: 0;
                    color: #555;
                }
                
                .button-showcase {
                    display: flex;
                    gap: 10px;
                    flex-wrap: wrap;
                    margin: 15px 0;
                }
                
                .features-list {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                    margin: 20px 0;
                }
                
                .feature-card {
                    padding: 20px;
                    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                    border-radius: 8px;
                    text-align: center;
                }
                
                .feature-card h4 {
                    margin-top: 0;
                    color: #667eea;
                }
                
                .code-example {
                    background: #f8f9fa;
                    border: 1px solid #e9ecef;
                    border-radius: 4px;
                    padding: 15px;
                    font-family: 'Monaco', 'Consolas', monospace;
                    font-size: 0.9rem;
                    overflow-x: auto;
                    margin: 15px 0;
                }
                
                .interactive-demo {
                    border: 2px dashed #667eea;
                    border-radius: 8px;
                    padding: 20px;
                    text-align: center;
                    margin: 20px 0;
                }
                
                .demo-output {
                    margin-top: 15px;
                    padding: 15px;
                    background: #e8f5e8;
                    border: 1px solid #4caf50;
                    border-radius: 4px;
                    display: none;
                }
                
                .hidden {
                    display: none;
                }
                
                @media (max-width: 768px) {
                    .header h1 {
                        font-size: 2rem;
                    }
                    
                    .navigation {
                        flex-direction: column;
                        align-items: center;
                    }
                    
                    .demo-grid {
                        grid-template-columns: 1fr;
                    }
                }
            `,
      styleName: 'wsx-app',
    });

    logger.info('WSX App initialized');
  }

  render(): HTMLElement {
    return (
      <div className="app-container">
        {this.renderHeader()}
        {this.renderNavigation()}
        {this.renderContent()}
      </div>
    );
  }

  private renderHeader(): HTMLElement {
    return (
      <header className="header">
        <h1>WSX Framework</h1>
        <p>Web Components with JSX Syntax & TypeScript Support</p>
      </header>
    );
  }

  private renderNavigation(): HTMLElement {
    const sections = [
      { id: 'overview', label: 'Overview' },
      { id: 'components', label: 'Components' },
      { id: 'features', label: 'Features' },
      { id: 'examples', label: 'Examples' },
    ];

    return (
      <nav className="navigation">
        {sections.map((section) => (
          <xy-button
            key={section.id}
            type={this.currentSection === section.id ? 'primary' : 'flat'}
            onClick={() => this.switchSection(section.id)}
          >
            {section.label}
          </xy-button>
        ))}
      </nav>
    );
  }

  private renderContent(): HTMLElement {
    const sections = {
      overview: this.renderOverview(),
      components: this.renderComponents(),
      features: this.renderFeatures(),
      examples: this.renderExamples(),
    };

    return <main>{sections[this.currentSection as keyof typeof sections]}</main>;
  }

  private renderOverview(): HTMLElement {
    return (
      <section className="section">
        <h2>Welcome to WSX Framework</h2>
        <p>
          WSX Framework is a modern Web Components framework that provides JSX syntax and TypeScript
          support for building native web components. It offers zero React dependency while
          maintaining familiar development patterns.
        </p>

        <div className="features-list">
          <div className="feature-card">
            <h4>ðŸš€ Zero Dependencies</h4>
            <p>No React or other framework dependencies. Pure native Web Components.</p>
          </div>
          <div className="feature-card">
            <h4>âš¡ TypeScript First</h4>
            <p>Full TypeScript support with excellent IntelliSense and type safety.</p>
          </div>
          <div className="feature-card">
            <h4>ðŸŽ¨ JSX Syntax</h4>
            <p>Write components using familiar JSX syntax with custom factory implementation.</p>
          </div>
          <div className="feature-card">
            <h4>ðŸ“¦ Shadow DOM</h4>
            <p>Isolated styling with Shadow DOM encapsulation and CSS-in-JS support.</p>
          </div>
        </div>

        <div className="code-example">
          {`import { WebComponent, autoRegister } from '@systembug/wsx-core';

@autoRegister()
export class MyButton extends WebComponent {
  render() {
    return <button onClick={this.handleClick}><slot></slot></button>;
  }
  
  private handleClick = () => {
    console.log('Button clicked!');
  };
}`}
        </div>
      </section>
    );
  }

  private renderComponents(): HTMLElement {
    return (
      <section className="section">
        <h2>Component Showcase</h2>
        <p>Explore the example components built with WSX Framework:</p>

        <div className="demo-grid">
          <div className="demo-item">
            <h3>XyButton Component</h3>
            <p>Feature-rich button with multiple styles and states:</p>
            <div className="button-showcase">
              <xy-button>Default</xy-button>
              <xy-button type="primary">Primary</xy-button>
              <xy-button type="danger">Danger</xy-button>
              <xy-button disabled>Disabled</xy-button>
              <xy-button loading>Loading</xy-button>
            </div>
          </div>

          <div className="demo-item">
            <h3>ColorPicker Component</h3>
            <p>Interactive color picker with custom color support:</p>
            <color-picker></color-picker>
          </div>

          <div className="demo-item">
            <h3>Button Group</h3>
            <p>Group buttons with shared state management:</p>
            <xy-button-group>
              <xy-button>First</xy-button>
              <xy-button>Second</xy-button>
              <xy-button>Third</xy-button>
            </xy-button-group>
          </div>
        </div>
      </section>
    );
  }

  private renderFeatures(): HTMLElement {
    return (
      <section className="section">
        <h2>Framework Features</h2>

        <div className="demo-grid">
          <div className="demo-item">
            <h3>Auto-Registration</h3>
            <p>
              Components automatically register themselves when imported using the @autoRegister
              decorator.
            </p>
            <div className="code-example">
              {`@autoRegister({ tagName: 'my-component' })
export class MyComponent extends WebComponent {
  // Component automatically available as <my-component>
}`}
            </div>
          </div>

          <div className="demo-item">
            <h3>Event System</h3>
            <p>Standard DOM events and custom events work seamlessly with WSX components.</p>
            <div className="code-example">
              {`// Standard events
<button onClick={this.handleClick}>Click me</button>

// Custom events
this.dispatchEvent(new CustomEvent('colorchange', {
  detail: { color: '#ff0000' }
}));`}
            </div>
          </div>

          <div className="demo-item">
            <h3>CSS Encapsulation</h3>
            <p>Scoped styles using Constructable StyleSheets prevent CSS conflicts.</p>
            <div className="code-example">
              {`import styles from './MyComponent.css?inline';

export class MyComponent extends WebComponent {
  constructor() {
    super({ styles });
  }
}`}
            </div>
          </div>

          <div className="demo-item">
            <h3>Lifecycle Methods</h3>
            <p>Standard Web Component lifecycle with TypeScript-friendly method names.</p>
            <div className="code-example">
              {`protected onConnected(): void {
  // Component mounted
}

protected onDisconnected(): void {
  // Component unmounted
}

protected onAttributeChanged(name: string, oldValue: string, newValue: string): void {
  // Attribute changed
}`}
            </div>
          </div>
        </div>
      </section>
    );
  }

  private renderExamples(): HTMLElement {
    return (
      <section className="section">
        <h2>Interactive Examples</h2>

        <div className="interactive-demo">
          <h3>Click Counter Demo</h3>
          <p>This demonstrates dynamic state management and event handling:</p>
          <xy-button id="counter-btn" type="primary">
            Click Count: 0
          </xy-button>
          <div id="counter-output" className="demo-output">
            Button has been clicked!
          </div>
        </div>

        <div className="interactive-demo">
          <h3>Color Change Demo</h3>
          <p>Pick a color to see live component interaction:</p>
          <color-picker id="demo-picker"></color-picker>
          <div
            id="color-display"
            style="width: 100px; height: 100px; border: 2px solid #ccc; border-radius: 8px; margin: 10px auto; background: #ffffff;"
          ></div>
        </div>

        <div className="demo-item">
          <h3>Source Code</h3>
          <p>
            All example components are located in <code>packages/examples/src/components/</code>:
          </p>
          <ul>
            <li>
              <strong>XyButton.wsx</strong> - Feature-rich button component
            </li>
            <li>
              <strong>ColorPicker.wsx</strong> - Interactive color picker
            </li>
            <li>
              <strong>XyButtonGroup.wsx</strong> - Button grouping container
            </li>
            <li>
              <strong>App.wsx</strong> - This showcase application
            </li>
          </ul>
          <p>
            Each <code>.wsx</code> file demonstrates the framework's capabilities and serves as a
            template for your own components.
          </p>
        </div>
      </section>
    );
  }

  private switchSection(sectionId: string): void {
    this.currentSection = sectionId;
    this.rerender();
    logger.debug(`Switched to section: ${sectionId}`);
  }

  private setupInteractivity(): void {
    // Counter demo
    const counterBtn = this.querySelector('#counter-btn');
    const counterOutput = this.querySelector('#counter-output');
    let clickCount = 0;

    counterBtn?.addEventListener('click', () => {
      clickCount++;
      if (counterBtn.textContent) {
        counterBtn.textContent = `Click Count: ${clickCount}`;
      }
      if (counterOutput) {
        counterOutput.textContent = `Button clicked ${clickCount} time${clickCount !== 1 ? 's' : ''}!`;
        counterOutput.style.display = 'block';
      }
    });

    // Color picker demo
    const colorPicker = this.querySelector('#demo-picker');
    const colorDisplay = this.querySelector('#color-display') as HTMLElement;

    colorPicker?.addEventListener('colorchange', (event: Event) => {
      const customEvent = event as CustomEvent;
      if (colorDisplay && customEvent.detail?.color) {
        colorDisplay.style.backgroundColor = customEvent.detail.color;
      }
    });
  }

  protected onConnected(): void {
    // Setup interactivity after component is connected
    setTimeout(() => this.setupInteractivity(), 100);
    logger.info('WSX App connected to DOM');
  }

  protected onDisconnected(): void {
    logger.info('WSX App disconnected from DOM');
  }
}
