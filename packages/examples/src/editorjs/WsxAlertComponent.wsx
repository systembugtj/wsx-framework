/** @jsxImportSource @wsxjs/wsx-core */
import { ReactiveWebComponent, autoRegister, createLogger } from "@wsxjs/wsx-core";
import styles from "./WsxAlertComponent.css?inline";

const logger = createLogger("WsxAlertComponent");

/**
 * WSX Alert Component - A reusable Web Component for rendering alert blocks
 *
 * This demonstrates how WSX components can be used as building blocks
 * for EditorJS plugins, providing better structure and reusability.
 * Now uses ReactiveWebComponent for better state management.
 */
@autoRegister({ tagName: "wsx-alert-component" })
export default class WsxAlertComponent extends ReactiveWebComponent {
    // Using reactive state - TypeScript compilation issue with property access
    private state = this.reactive({
        alertType: "info",
        alertMessage: "",
        isReadOnly: false,
    });

    static get observedAttributes() {
        return ["type", "message", "readonly"];
    }

    constructor() {
        super({
            styles,
            styleName: "wsx-alert-component",
        });

        logger.info("WSX Alert component initialized");
    }

    render() {
        const icons = {
            info: "ℹ️",
            warning: "⚠️",
            success: "✅",
            error: "❌",
        };

        return (
            <div class={`wsx-alert-wrapper ${this.state.alertType}`}>
                <span class="wsx-alert-icon">
                    {icons[this.state.alertType as keyof typeof icons]}
                </span>
                <div class="wsx-alert-content">
                    {!this.state.isReadOnly && (
                        <select
                            class="alert-type-selector"
                            value={this.state.alertType}
                            onchange={this.handleTypeChange}
                        >
                            <option value="info">Info</option>
                            <option value="warning">Warning</option>
                            <option value="success">Success</option>
                            <option value="error">Error</option>
                        </select>
                    )}
                    <div
                        contentEditable={!this.state.isReadOnly ? "true" : "false"}
                        class="alert-message"
                        oninput={this.handleMessageInput}
                        placeholder="Enter alert message..."
                    >
                        {this.state.alertMessage}
                    </div>
                </div>
            </div>
        );
    }

    private handleTypeChange = (event: Event) => {
        const select = event.target as HTMLSelectElement;
        this.state.alertType = select.value;
        logger.debug("Alert type changed", this.state.alertType);
        super.dispatchEvent(new CustomEvent("type-change", { detail: this.state.alertType }));
    };

    private handleMessageInput = (event: Event) => {
        const div = event.target as HTMLDivElement;
        this.state.alertMessage = div.textContent || "";
        logger.debug("Alert message updated", this.state.alertMessage);
        super.dispatchEvent(new CustomEvent("message-change", { detail: this.state.alertMessage }));
    };

    onAttributeChanged(name: string, _oldValue: string | null, newValue: string | null) {
        switch (name) {
            case "type":
                this.state.alertType = newValue || "info";
                break;
            case "message":
                this.state.alertMessage = newValue || "";
                break;
            case "readonly":
                this.state.isReadOnly = newValue === "true";
                break;
        }
    }

    // Public API for EditorJS integration
    setData(type: string, message: string) {
        this.state.alertType = type;
        this.state.alertMessage = message;
    }

    getData() {
        return {
            type: this.state.alertType,
            message: this.state.alertMessage,
        };
    }
}
