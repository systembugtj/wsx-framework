/** @jsxImportSource @wsxjs/wsx-core */
import { createLogger } from "@wsxjs/wsx-core";
import type { InlineTool, InlineToolConstructorOptions } from "@editorjs/editorjs";
import "./WsxHighlightButton.wsx";
import type WsxHighlightButton from "./WsxHighlightButton.wsx";
const logger = createLogger("WsxHighlightTool");

// Export the inline tool class for EditorJS
export default class WsxHighlightTool implements InlineTool {
    private button: WsxHighlightButton;
    private api: any;
    private tag = "MARK";

    static get isInline() {
        return true;
    }

    static get sanitize() {
        return {
            mark: {
                class: true,
                style: {
                    "background-color": true,
                    padding: true,
                    "border-radius": true,
                },
            },
        };
    }

    constructor({ api }: InlineToolConstructorOptions) {
        this.api = api;
        logger.info("Highlight tool initialized");
    }

    render() {
        this.button = (
            <wsx-highlight-button
                onClick={() => this.surround(this.api.selection.range)}
            ></wsx-highlight-button>
        ) as unknown as WsxHighlightButton;

        return this.button as unknown as HTMLElement;
    }

    surround(range: Range) {
        if (!range) {
            return;
        }

        const termWrapper = this.api.selection.findParentTag(this.tag);

        if (termWrapper) {
            this.unwrap(termWrapper);
        } else {
            this.wrap(range);
        }
    }

    wrap(range: Range) {
        const selectedText = range.extractContents();
        const mark = document.createElement(this.tag);

        mark.style.backgroundColor = "#ffeaa7";
        mark.style.padding = "2px 4px";
        mark.style.borderRadius = "3px";
        mark.appendChild(selectedText);
        range.insertNode(mark);

        this.api.selection.expandToTag(mark);
        logger.debug("Text highlighted");
    }

    unwrap(termWrapper: HTMLElement) {
        this.api.selection.expandToTag(termWrapper);

        const sel = window.getSelection();
        if (!sel) return;

        const range = sel.getRangeAt(0);
        const unwrappedContent = range.extractContents();

        termWrapper.parentNode?.removeChild(termWrapper);
        range.insertNode(unwrappedContent);

        sel.removeAllRanges();
        sel.addRange(range);
        logger.debug("Highlight removed");
    }

    checkState() {
        const termTag = this.api.selection.findParentTag(this.tag);
        this.button.setActive(!!termTag);
    }

    static get shortcut() {
        return "CMD+SHIFT+H";
    }
}
