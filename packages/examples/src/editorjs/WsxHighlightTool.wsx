/** @jsxImportSource @wsxjs/wsx-core */
import { WebComponent, autoRegister, createLogger } from "@wsxjs/wsx-core";
import type { InlineTool, InlineToolConstructorOptions } from "@editorjs/editorjs";

const logger = createLogger("WsxHighlightTool");

/**
 * WSX Highlight Inline Tool - Shows how WSX simplifies inline tool development
 *
 * Advantages over vanilla JS:
 * 1. Declarative UI with JSX
 * 2. Proper event handling with typed events
 * 3. Clean component structure
 * 4. Built-in logging and debugging
 */
@autoRegister({ tagName: "wsx-highlight-button" })
export default class WsxHighlightButton extends WebComponent {
    private isActive: boolean = false;
    private onClick?: () => void;

    static get observedAttributes() {
        return ["active"];
    }

    constructor() {
        super();
        logger.info("Highlight button initialized");
    }

    render() {
        return (
            <button
                class="wsx-highlight-button"
                onClick={this.handleClick}
                style={`
          background: ${this.isActive ? "#ffeaa7" : "transparent"};
          border: 1px solid ${this.isActive ? "#fdcb6e" : "#ddd"};
          border-radius: 4px;
          padding: 4px 8px;
          cursor: pointer;
          display: flex;
          align-items: center;
          gap: 4px;
          font-size: 14px;
          transition: all 0.2s ease;
        `}
                onMouseOver={this.handleMouseOver}
                onMouseOut={this.handleMouseOut}
            >
                <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill={this.isActive ? "#fdcb6e" : "#666"}
                >
                    <path d="M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z" />
                </svg>
                <span>Highlight</span>
            </button>
        );
    }

    private handleClick = (event: Event) => {
        event.preventDefault();
        logger.debug("Button clicked");
        if (this.onClick) {
            this.onClick();
        }
    };

    private handleMouseOver = () => {
        this.style.transform = "scale(1.05)";
    };

    private handleMouseOut = () => {
        this.style.transform = "scale(1)";
    };

    setClickHandler(handler: () => void) {
        this.onClick = handler;
    }

    setActive(active: boolean) {
        this.isActive = active;
        this.update();
    }

    onAttributeChanged(name: string, oldValue: string | null, newValue: string | null) {
        if (name === "active") {
            this.isActive = newValue === "true";
            this.update();
        }
    }
}

// Export the inline tool class for EditorJS
export class WsxHighlightTool implements InlineTool {
    private button: WsxHighlightButton;
    private api: any;
    private tag = "MARK";

    static get isInline() {
        return true;
    }

    static get sanitize() {
        return {
            mark: {
                class: true,
                style: {
                    "background-color": true,
                    padding: true,
                    "border-radius": true,
                },
            },
        };
    }

    constructor({ api }: InlineToolConstructorOptions) {
        this.api = api;
        this.button = new WsxHighlightButton();
        logger.info("Highlight tool initialized");
    }

    render() {
        this.button.setClickHandler(() => {
            this.surround(this.api.selection.range);
        });
        return this.button as unknown as HTMLElement;
    }

    surround(range: Range) {
        if (!range) {
            return;
        }

        const termWrapper = this.api.selection.findParentTag(this.tag);

        if (termWrapper) {
            this.unwrap(termWrapper);
        } else {
            this.wrap(range);
        }
    }

    wrap(range: Range) {
        const selectedText = range.extractContents();
        const mark = document.createElement(this.tag);

        mark.style.backgroundColor = "#ffeaa7";
        mark.style.padding = "2px 4px";
        mark.style.borderRadius = "3px";
        mark.appendChild(selectedText);
        range.insertNode(mark);

        this.api.selection.expandToTag(mark);
        logger.debug("Text highlighted");
    }

    unwrap(termWrapper: HTMLElement) {
        this.api.selection.expandToTag(termWrapper);

        const sel = window.getSelection();
        if (!sel) return;

        const range = sel.getRangeAt(0);
        const unwrappedContent = range.extractContents();

        termWrapper.parentNode?.removeChild(termWrapper);
        range.insertNode(unwrappedContent);

        sel.removeAllRanges();
        sel.addRange(range);
        logger.debug("Highlight removed");
    }

    checkState() {
        const termTag = this.api.selection.findParentTag(this.tag);
        this.button.setActive(!!termTag);
    }

    static get shortcut() {
        return "CMD+SHIFT+H";
    }
}
