/** @jsxImportSource @wsxjs/wsx-core */
import { createLogger } from "@wsxjs/wsx-core";
import type { BlockTool, BlockToolConstructorOptions, BlockToolData } from "@editorjs/editorjs";
import "./WsxCodeTool.css";
import "./WsxCodeComponent.wsx";
import type WsxCodeComponent from "./WsxCodeComponent.wsx";

const logger = createLogger("WsxCodeTool");

export interface CodeData extends BlockToolData {
    code: string;
    language: string;
    showLineNumbers: boolean;
}

/**
 * WSX Code Tool - EditorJS Plugin using WSX Component
 *
 * This demonstrates advanced WSX features:
 * - Reactive state management
 * - Event handling
 * - Dynamic styling
 * - Component composition
 */
export default class WsxCodeTool implements BlockTool {
    private data: CodeData;
    private readOnly: boolean;
    private component?: WsxCodeComponent;
    private wrapper?: HTMLElement;

    static get toolbox() {
        return {
            title: "Code Block",
            icon: "ðŸ’»",
        };
    }

    static get isReadOnlySupported() {
        return true;
    }

    constructor(options?: BlockToolConstructorOptions<CodeData>) {
        this.data = options?.data || {
            code: "",
            language: "javascript",
            showLineNumbers: true,
        };
        this.readOnly = options?.readOnly || false;
        logger.info("WsxCodeTool initialized");
    }

    render(): HTMLElement {
        // Create a plain wrapper div for EditorJS
        this.wrapper = (
            <div>
                <wsx-code-component
                    code={this.data.code}
                    language={this.data.language}
                    showLineNumbers={this.data.showLineNumbers}
                    readonly={this.readOnly ? "true" : "false"}
                    oncodechange={(e: CustomEvent) => {
                        this.data.code = e.detail;
                    }}
                    onlanguagechange={(e: CustomEvent) => {
                        this.data.language = e.detail;
                    }}
                    onshowlinenumberschange={(e: CustomEvent) => {
                        this.data.showLineNumbers = e.detail;
                    }}
                    ref={(component) => {
                        this.component = component;
                    }}
                ></wsx-code-component>
            </div>
        );
        return this.wrapper;
    }

    save(): CodeData {
        if (this.component) {
            const componentData = this.component.getData();
            this.data = {
                code: componentData.code,
                language: componentData.language,
                showLineNumbers: componentData.showLineNumbers,
            };
        }
        logger.info("Saving WSX code data", this.data);
        return this.data;
    }

    validate(savedData: CodeData): boolean {
        return savedData.code?.trim().length > 0;
    }

    renderSettings(): HTMLElement {
        const wrapper = document.createElement("div");
        wrapper.style.padding = "16px";

        const label = document.createElement("label");
        label.style.display = "block";
        label.style.marginBottom = "8px";
        label.style.fontWeight = "bold";
        label.textContent = "WSX Code Block Settings";

        const description = document.createElement("p");
        description.style.color = "#666";
        description.style.fontSize = "14px";
        description.textContent =
            "This code block is built using WSX Web Components with syntax highlighting, line numbers, and formatting capabilities.";

        wrapper.appendChild(label);
        wrapper.appendChild(description);

        return wrapper;
    }
}
