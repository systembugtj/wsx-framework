/**
 * 通用WSX颜色选择器 - Web Component示例
 *
 * 使用 .wsx 扩展名享受真正的TSX语法：
 * - 继承EditorJSToolComponent
 * - 真正的JSX语法支持
 * - 支持外部CSS文件
 * - 完全通用，不依赖特定UI库
 */

import { WebComponent, autoRegister, createLogger } from "@systembug/wsx-core";
import styles from "./ColorPicker.css?inline";
import {
    handleCSSVariables,
    setDefaultColorCache,
    getCustomColorCache,
    setCustomColorCache,
    throttle,
    type PluginType,
} from "./ColorPickerUtils";

const logger = createLogger('ColorPicker');

// 导出ColorPickerUtils方法 用于外部调用
export * from "./ColorPickerUtils";

/**
 * 颜色选择器配置接口
 */
export interface ColorPickerConfig {
    colorCollections?: string[];
    onColorPicked?: (color: string) => void;
    hasCustomPicker?: boolean;
    defaultColor?: string;
    pluginType?: PluginType;
    disabled?: boolean;
    api?: unknown; // EditorJS API
}

/**
 * 默认颜色集合
 */
const DEFAULT_COLORS = [
    "#ff1300",
    "#EC7878",
    "#9C27B0",
    "#673AB7",
    "#3F51B5",
    "#0070FF",
    "#03A9F4",
    "#00BCD4",
    "#4CAF50",
    "#8BC34A",
    "#CDDC39",
    "#FFE500",
    "#FFBF00",
    "#FF9800",
    "#795548",
    "#9E9E9E",
    "#5A5A5A",
    "#FFF",
];

/**
 *  颜色选择器组件 Web Component with JSX aka WSX
 */
@autoRegister({ tagName: "color-picker" })
export default class ColorPicker extends WebComponent {
    private colorCollections: string[];
    private onColorPicked?: (color: string) => void;
    private hasCustomPicker: boolean;
    private defaultColor: string;
    private pluginType: PluginType;
    private disabled: boolean;

    // 状态
    private selectedColor: string;
    private customColor: string;
    private isOpen: boolean;

    // DOM引用
    private colorBtn?: HTMLElement;
    private colorPanel?: HTMLElement;

    static get observedAttributes(): string[] {
        return ["disabled", "selected-color", "open"];
    }

    constructor(config: ColorPickerConfig = {}) {
        super({
            styles,
            styleName: "base-color-picker",
            ...config,
        });

        // 初始化配置
        this.colorCollections = config.colorCollections || DEFAULT_COLORS;
        this.onColorPicked = config.onColorPicked;
        this.hasCustomPicker = config.hasCustomPicker || false;
        this.pluginType = config.pluginType || "text";
        this.disabled = config.disabled || false;

        // 初始化状态
        this.defaultColor = handleCSSVariables(
            config.defaultColor || this.colorCollections[0],
        );
        this.selectedColor = this.defaultColor;
        this.customColor = getCustomColorCache(this.pluginType) || "";
        this.isOpen = false;

        logger.debug("ColorPicker initialized", {
            colorCollections: this.colorCollections.length,
            hasCustomPicker: this.hasCustomPicker,
            pluginType: this.pluginType,
        });
    }

    /**
     * 实现抽象方法：真正的JSX渲染！🎉
     */
    render(): HTMLElement {
        return (
            <section className="color-section">
                <div className="color-popover">
                    {this.renderColorButton()}
                    {this.isOpen && this.renderColorPanel()}
                </div>
            </section>
        );
    }

    /**
     * 渲染颜色按钮 - 真正的JSX！
     */
    private renderColorButton(): HTMLElement {
        return (
            <xy-button
                type="button"
                className={`color-btn ${this.disabled ? "disabled" : ""}`}
                style={`--theme-color: ${this.selectedColor}`}
                disabled={this.disabled}
                onClick={this.handleButtonClick}
                ref={(el: HTMLButtonElement) => {
                    this.colorBtn = el;
                }}
            >
                <span className="color-indicator">_</span>
            </xy-button>
        );
    }

    /**
     * 渲染颜色面板 - 真正的JSX！
     */
    private renderColorPanel(): HTMLElement {
        return (
            <div
                className="color-panel"
                onClick={this.handlePanelClick}
                ref={(el: HTMLDivElement) => {
                    this.colorPanel = el;
                }}
            >
                <div className="color-grid">
                    {this.hasCustomPicker && this.renderCustomPicker()}
                    {this.renderColorButtons()}
                </div>
            </div>
        );
    }

    /**
     * 渲染自定义颜色选择器 - 真正的JSX！
     */
    private renderCustomPicker(): HTMLElement {
        return (
            <xy-button
                type="button"
                className="color-cube custom-picker"
                style={{ backgroundColor: this.customColor }}
                onClick={this.handleCustomPickerClick}
                title="自定义颜色"
            />
        );
    }

    /**
     * 渲染颜色按钮组 - 真正的JSX！
     */
    private renderColorButtons(): HTMLElement[] {
        return this.colorCollections.map((color) => (
            <xy-button
                key={color}
                type="button"
                className="color-cube"
                style={`background-color: ${color}`}
                data-color={color}
                title={color}
                onClick={() => this.handleColorSelect(color)}
            />
        ));
    }

    /**
     * 处理主按钮点击
     */
    private handleButtonClick = (event: Event): void => {
        event.stopPropagation();
        this.togglePanel();
    };

    /**
     * 处理面板点击
     */
    private handlePanelClick = (event: Event): void => {
        event.stopPropagation();
    };

    /**
     * 处理颜色选择
     */
    private handleColorSelect = (color: string): void => {
        const processedColor = handleCSSVariables(color);
        this.setSelectedColor(processedColor);
        this.closePanel();

        // 缓存选择的颜色
        setDefaultColorCache(processedColor, this.pluginType);

        // 触发回调和事件
        this.onColorPicked?.(processedColor);
        this.dispatchEvent(
            new CustomEvent("colorchange", {
                detail: { color: processedColor },
                bubbles: true,
                composed: true,
            }),
        );

        logger.debug("Color selected", { color: processedColor });
    };

    /**
     * 处理自定义颜色选择器点击
     */
    private handleCustomPickerClick = (): void => {
        const input = document.createElement("input");
        input.type = "color";
        input.value = this.customColor;
        input.style.cssText = `
            position: fixed;
            left: -9999px;
            opacity: 0;
            pointer-events: none;
        `;

        const handleInput = throttle((e: Event) => {
            const target = e.target as HTMLInputElement;
            const color = handleCSSVariables(target.value);

            this.setSelectedColor(color);
            this.setCustomColor(color);

            // 清理输入元素
            document.body.removeChild(input);

            // 触发回调
            this.onColorPicked?.(color);
            this.dispatchEvent(
                new CustomEvent("colorchange", {
                    detail: { color },
                    bubbles: true,
                    composed: true,
                }),
            );

            logger.debug("Custom color selected", { color });
        }, 30);

        input.addEventListener("input", handleInput);
        document.body.appendChild(input);

        // 触发颜色选择器
        requestAnimationFrame(() => {
            input.focus();
            input.click();
        });
    };

    /**
     * 切换面板显示状态
     */
    private togglePanel(): void {
        this.setOpen(!this.isOpen);
    }

    /**
     * 关闭面板
     */
    private closePanel(): void {
        this.setOpen(false);
    }

    /**
     * 设置选中的颜色
     */
    private setSelectedColor(color: string): void {
        this.selectedColor = color;
        this.setAttr("selected-color", color);
        this.updateColorButton();
    }

    /**
     * 设置自定义颜色
     */
    private setCustomColor(color: string): void {
        this.customColor = color;
        setCustomColorCache(color, this.pluginType);
    }

    /**
     * 设置面板开关状态
     */
    private setOpen(open: boolean): void {
        this.isOpen = open;

        if (open) {
            this.setAttr("open", "");
        } else {
            this.removeAttr("open");
        }

        this.rerender();
    }

    /**
     * 更新颜色按钮样式
     */
    private updateColorButton(): void {
        if (this.colorBtn) {
            this.colorBtn.style.setProperty(
                "--theme-color",
                this.selectedColor,
            );
        }
    }

    /**
     * 组件连接到DOM后的初始化
     */
    protected onConnected(): void {
        // 绑定全局点击事件以关闭面板
        document.addEventListener("click", this.handleDocumentClick);

        logger.info("ColorPicker connected to DOM");
    }

    /**
     * 组件从DOM断开时的清理
     */
    protected onDisconnected(): void {
        document.removeEventListener("click", this.handleDocumentClick);

        logger.info("ColorPicker disconnected from DOM");
    }

    /**
     * 属性变化处理
     */
    protected onAttributeChanged(
        name: string,
        _oldValue: string,
        newValue: string,
    ): void {
        switch (name) {
            case "disabled":
                this.disabled = newValue !== null;
                this.rerender();
                break;
            case "selected-color":
                if (newValue && newValue !== this.selectedColor) {
                    this.selectedColor = newValue;
                    this.updateColorButton();
                }
                break;
            case "open":
                this.isOpen = newValue !== null;
                break;
        }
    }

    /**
     * 处理文档点击以关闭面板
     */
    private handleDocumentClick = (event: Event): void => {
        if (this.isOpen && !this.contains(event.target as Node)) {
            this.closePanel();
        }
    };

    /**
     * 公共API：获取当前选中的颜色
     */
    public getSelectedColor(): string {
        return this.selectedColor;
    }

    /**
     * 公共API：设置颜色
     */
    public setColor(color: string): void {
        this.setSelectedColor(handleCSSVariables(color));
    }

    /**
     * 公共API：聚焦组件
     */
    public focus(): void {
        this.colorBtn?.focus();
    }
}
