/** @jsxImportSource @systembug/wsx-core */
/**
 * 响应式计数器组件 - 展示 WSX 响应式状态系统
 *
 * 这个组件演示了：
 * - 自动重渲染：状态变化时无需手动调用 rerender()
 * - 批量更新：多个状态变化会被合并为一次重渲染
 * - 原生性能：基于浏览器 Proxy API，零运行时开销
 */

import { ReactiveWebComponent, autoRegister, createLogger } from "@systembug/wsx-core";
import styles from "./ReactiveCounter.css?inline";

const logger = createLogger("ReactiveCounter");

@autoRegister({ tagName: "reactive-counter" })
export default class ReactiveCounter extends ReactiveWebComponent {
    // 使用响应式对象 - 任何属性变化都会自动触发重渲染
    private state = this.reactive({
        count: 0,
        step: 1,
        message: "Hello WSX Reactive!",
        isRunning: false,
    });

    // 使用 useState API - 类似 React 的 useState
    private themeState = this.useState("theme", "light");
    private historyState = this.useState("history", [] as number[]);

    private getTheme = this.themeState[0];
    private setTheme = this.themeState[1];
    private getHistory = this.historyState[0];
    private setHistory = this.historyState[1];

    constructor() {
        super({
            styles,
            debug: true, // 启用调试模式
        });

        logger.info("ReactiveCounter initialized");
    }

    render() {
        const theme = this.getTheme();
        const history = this.getHistory();

        return (
            <div class={`reactive-counter theme-${theme}`}>
                <div class="header">
                    <h3>🔄 Reactive Counter</h3>
                    <p class="subtitle">{this.state.message}</p>
                </div>

                <div class="counter-display">
                    <div class="count-value">{this.state.count}</div>
                    <div class="step-info">Step: {this.state.step}</div>
                </div>

                <div class="controls">
                    <button
                        class="btn btn-primary"
                        onClick={this.increment}
                        disabled={this.state.isRunning}
                    >
                        +{this.state.step}
                    </button>

                    <button
                        class="btn btn-secondary"
                        onClick={this.decrement}
                        disabled={this.state.isRunning}
                    >
                        -{this.state.step}
                    </button>

                    <button
                        class="btn btn-warning"
                        onClick={this.reset}
                        disabled={this.state.isRunning}
                    >
                        Reset
                    </button>
                </div>

                <div class="step-controls">
                    <label>
                        Step Size:
                        <input
                            type="range"
                            min="1"
                            max="10"
                            value={this.state.step}
                            onInput={this.handleStepChange}
                        />
                        <span>{this.state.step}</span>
                    </label>
                </div>

                <div class="auto-controls">
                    <button
                        class={`btn ${this.state.isRunning ? "btn-danger" : "btn-success"}`}
                        onClick={this.toggleAutoIncrement}
                    >
                        {this.state.isRunning ? "Stop" : "Start"} Auto Increment
                    </button>
                </div>

                <div class="theme-controls">
                    <label>
                        Theme:
                        <select value={theme} onChange={this.handleThemeChange}>
                            <option value="light">Light</option>
                            <option value="dark">Dark</option>
                            <option value="blue">Blue</option>
                        </select>
                    </label>
                </div>

                <div class="message-controls">
                    <input
                        type="text"
                        value={this.state.message}
                        onInput={this.handleMessageChange}
                        placeholder="Enter a message..."
                    />
                </div>

                {history.length > 0 && (
                    <div class="history">
                        <h4>History (last 10):</h4>
                        <div class="history-list">
                            {history.slice(-10).map((value, index) => (
                                <span key={index} class="history-item">
                                    {value}
                                </span>
                            ))}
                        </div>
                        <button class="btn btn-sm" onClick={this.clearHistory}>
                            Clear History
                        </button>
                    </div>
                )}

                <div class="debug-info">
                    <details>
                        <summary>Debug Info</summary>
                        <pre>
                            {JSON.stringify(
                                {
                                    state: this.state,
                                    theme: this.getTheme(),
                                    historyLength: this.getHistory().length,
                                    stateSnapshot: this.getStateSnapshot(),
                                },
                                null,
                                2
                            )}
                        </pre>
                    </details>
                </div>
            </div>
        );
    }

    // 事件处理方法 - 直接修改状态，自动触发重渲染
    private increment = () => {
        this.state.count += this.state.step;
        this.addToHistory(this.state.count);
    };

    private decrement = () => {
        this.state.count -= this.state.step;
        this.addToHistory(this.state.count);
    };

    private reset = () => {
        this.state.count = 0;
        this.addToHistory(0);
    };

    private handleStepChange = (event: Event) => {
        const input = event.target as HTMLInputElement;
        this.state.step = parseInt(input.value);
    };

    private handleThemeChange = (event: Event) => {
        const select = event.target as HTMLSelectElement;
        this.setTheme(select.value);
    };

    private handleMessageChange = (event: Event) => {
        const input = event.target as HTMLInputElement;
        this.state.message = input.value;
    };

    private toggleAutoIncrement = () => {
        this.state.isRunning = !this.state.isRunning;

        if (this.state.isRunning) {
            this.startAutoIncrement();
        }
    };

    private startAutoIncrement() {
        const interval = setInterval(() => {
            if (!this.state.isRunning) {
                clearInterval(interval);
                return;
            }

            this.increment();

            // 演示批量更新：这些变化会被合并为一次重渲染
            if (this.state.count % 5 === 0) {
                this.state.message = `Count reached ${this.state.count}!`;
            }
        }, 200);
    }

    private addToHistory(value: number) {
        const history = this.getHistory();
        this.setHistory([...history, value]);
    }

    private clearHistory = () => {
        this.setHistory([]);
    };

    protected onConnected(): void {
        logger.info("ReactiveCounter connected to DOM");

        // 组件挂载时显示欢迎消息
        setTimeout(() => {
            this.state.message = "Ready to count! 🚀";
        }, 500);
    }

    protected onDisconnected(): void {
        logger.info("ReactiveCounter disconnected from DOM");
        // 清理定时器等资源
        this.state.isRunning = false;
    }
}
