/** @jsxImportSource @systembug/wsx-core */
import { WebComponent, autoRegister, createLogger } from "@systembug/wsx-core";

const logger = createLogger("SvgDemo");

@autoRegister({ tagName: "svg-demo" })
export default class SvgDemo extends WebComponent {
    private animationId: number | null = null;
    private rotationAngle = 0;

    constructor() {
        super();
        logger.info("SvgDemo component initialized");
    }

    render() {
        return (
            <div style="padding: 20px; background: #f5f5f5; border-radius: 8px; margin: 10px 0;">
                <h3 style="margin-top: 0; color: #333;">SVG Showcase</h3>

                {/* Basic SVG shapes */}
                <div style="margin-bottom: 20px;">
                    <h4 style="margin: 10px 0; color: #666;">Basic Shapes</h4>
                    <svg
                        width="300"
                        height="100"
                        style="border: 1px solid #ddd; background: white;"
                    >
                        <circle
                            cx="50"
                            cy="50"
                            r="30"
                            fill="#e74c3c"
                            stroke="#c0392b"
                            strokeWidth="2"
                        />
                        <rect
                            x="100"
                            y="20"
                            width="60"
                            height="60"
                            fill="#3498db"
                            stroke="#2980b9"
                            strokeWidth="2"
                            rx="5"
                        />
                        <polygon
                            points="200,20 230,80 170,80"
                            fill="#2ecc71"
                            stroke="#27ae60"
                            strokeWidth="2"
                        />
                        <line
                            x1="250"
                            y1="20"
                            x2="290"
                            y2="80"
                            stroke="#9b59b6"
                            strokeWidth="3"
                            strokeLinecap="round"
                        />
                    </svg>
                </div>

                {/* SVG with gradients */}
                <div style="margin-bottom: 20px;">
                    <h4 style="margin: 10px 0; color: #666;">Gradients & Effects</h4>
                    <svg
                        width="300"
                        height="100"
                        style="border: 1px solid #ddd; background: white;"
                    >
                        <defs>
                            <linearGradient id="blueGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                                <stop offset="0%" stopColor="#3498db" />
                                <stop offset="100%" stopColor="#9b59b6" />
                            </linearGradient>
                            <radialGradient id="redGradient" cx="50%" cy="50%" r="50%">
                                <stop offset="0%" stopColor="#e74c3c" />
                                <stop offset="100%" stopColor="#c0392b" />
                            </radialGradient>
                        </defs>
                        <rect
                            x="20"
                            y="20"
                            width="120"
                            height="60"
                            fill="url(#blueGradient)"
                            rx="10"
                        />
                        <circle cx="200" cy="50" r="35" fill="url(#redGradient)" />
                    </svg>
                </div>

                {/* Animated SVG */}
                <div style="margin-bottom: 20px;">
                    <h4 style="margin: 10px 0; color: #666;">Animation</h4>
                    <svg
                        width="300"
                        height="100"
                        style="border: 1px solid #ddd; background: white;"
                    >
                        <g transform={`translate(150, 50) rotate(${this.rotationAngle})`}>
                            <polygon
                                points="-30,0 0,-40 30,0 0,40"
                                fill="#f39c12"
                                stroke="#e67e22"
                                strokeWidth="2"
                            />
                            <circle cx="0" cy="0" r="8" fill="#2c3e50" />
                        </g>
                    </svg>
                    <div style="margin-top: 10px;">
                        <button
                            onClick={this.startAnimation}
                            style="margin-right: 10px; padding: 5px 10px;"
                        >
                            Start Animation
                        </button>
                        <button onClick={this.stopAnimation} style="padding: 5px 10px;">
                            Stop Animation
                        </button>
                    </div>
                </div>

                {/* Interactive SVG chart */}
                <div style="margin-bottom: 20px;">
                    <h4 style="margin: 10px 0; color: #666;">Interactive Chart</h4>
                    {this.renderChart()}
                </div>

                {/* SVG Icons */}
                <div>
                    <h4 style="margin: 10px 0; color: #666;">Icon Components</h4>
                    <div style="display: flex; gap: 15px; align-items: center;">
                        <svg-icon name="star" size="32" color="#f39c12"></svg-icon>
                        <svg-icon name="heart" size="32" color="#e74c3c"></svg-icon>
                        <svg-icon name="check" size="32" color="#27ae60"></svg-icon>
                        <svg-icon name="github" size="32" color="#333"></svg-icon>
                        <svg-icon name="play" size="32" color="#3498db"></svg-icon>
                        <svg-icon name="settings" size="32" color="#9b59b6"></svg-icon>
                    </div>
                </div>
            </div>
        );
    }

    private renderChart() {
        const data = [30, 80, 45, 60, 20, 90, 55];
        const maxValue = Math.max(...data);
        const barWidth = 30;
        const barSpacing = 40;
        const chartHeight = 120;
        const chartWidth = data.length * barSpacing + 40;

        return (
            <svg
                width={chartWidth}
                height={chartHeight + 40}
                style="border: 1px solid #ddd; background: white;"
            >
                {/* Chart bars */}
                {data.map((value, index) => {
                    const barHeight = (value / maxValue) * chartHeight;
                    const x = index * barSpacing + 20;
                    const y = chartHeight - barHeight + 20;

                    return (
                        <g key={index}>
                            <rect
                                x={x}
                                y={y}
                                width={barWidth}
                                height={barHeight}
                                fill="#3498db"
                                stroke="#2980b9"
                                strokeWidth="1"
                                onMouseEnter={(e) => this.showTooltip(e, value)}
                                onMouseLeave={this.hideTooltip}
                                style="cursor: pointer; transition: fill 0.2s;"
                            />
                            <text
                                x={x + barWidth / 2}
                                y={chartHeight + 35}
                                textAnchor="middle"
                                fontSize="12"
                                fill="#666"
                            >
                                {index + 1}
                            </text>
                        </g>
                    );
                })}
            </svg>
        );
    }

    private showTooltip = (event: Event, value: number) => {
        const rect = event.target as SVGRectElement;
        rect.setAttribute("fill", "#e74c3c");

        // You could create a proper tooltip here
        logger.debug(`Tooltip value: ${value}`);
    };

    private hideTooltip = (event: Event) => {
        const rect = event.target as SVGRectElement;
        rect.setAttribute("fill", "#3498db");
    };

    private startAnimation = () => {
        if (this.animationId) return;

        const animate = () => {
            this.rotationAngle += 2;
            if (this.rotationAngle >= 360) {
                this.rotationAngle = 0;
            }
            this.rerender();
            this.animationId = requestAnimationFrame(animate);
        };

        this.animationId = requestAnimationFrame(animate);
    };

    private stopAnimation = () => {
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
            this.animationId = null;
        }
    };

    protected onConnected(): void {
        logger.info("SvgDemo connected to DOM");
    }

    protected onDisconnected(): void {
        logger.info("SvgDemo disconnected from DOM");
        this.stopAnimation();
    }
}
