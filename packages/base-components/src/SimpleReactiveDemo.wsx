/** @jsxImportSource @systembug/wsx-core */
/**
 * 简单的响应式演示组件
 * 展示 WSX 响应式状态系统的基本功能
 */

import { ReactiveWebComponent, autoRegister, createLogger } from "@systembug/wsx-core";

const logger = createLogger("SimpleReactiveDemo");

@autoRegister({ tagName: "simple-reactive-demo" })
export default class SimpleReactiveDemo extends ReactiveWebComponent {
    // 响应式状态 - 自动触发重渲染
    private state = this.reactive({
        count: 0,
        message: "Click the button!",
    });

    constructor() {
        super();
        logger.info("SimpleReactiveDemo initialized");
    }

    render() {
        return (
            <div style="padding: 20px; border: 1px solid #ccc; border-radius: 8px; margin: 20px;">
                <h3>📱 Simple Reactive Demo</h3>
                <p>{this.state.message}</p>
                <div style="font-size: 24px; margin: 16px 0;">
                    Count: <strong>{this.state.count}</strong>
                </div>
                <div>
                    <button onClick={this.increment} style="margin-right: 8px; padding: 8px 16px;">
                        + Increment
                    </button>
                    <button onClick={this.reset} style="padding: 8px 16px;">
                        🔄 Reset
                    </button>
                </div>
                <div style="margin-top: 16px; font-size: 12px; color: #666;">
                    💡 State changes automatically trigger re-renders!
                </div>
            </div>
        );
    }

    private increment = () => {
        this.state.count++;
        this.state.message = `Clicked ${this.state.count} time${this.state.count === 1 ? "" : "s"}!`;
        // 注意：不需要手动调用 this.rerender()！
    };

    private reset = () => {
        this.state.count = 0;
        this.state.message = "Reset! Click again!";
        // 注意：这里也不需要手动调用 this.rerender()！
    };
}
