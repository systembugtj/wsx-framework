name: PR Validation

on:
    pull_request:
        branches: [develop]
        types: [opened, synchronize, reopened]

jobs:
    # Validate commit messages
    commitlint:
        name: Validate Commits
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - uses: pnpm/action-setup@v2
              with:
                  version: 8

            - uses: actions/setup-node@v4
              with:
                  node-version: 18
                  cache: "pnpm"

            - run: pnpm install --frozen-lockfile

            - name: Validate commit messages
              run: npx commitlint --from=${{ github.event.pull_request.base.sha }} --to=${{ github.event.pull_request.head.sha }} --verbose

    # Lint code
    lint:
        name: Lint
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - uses: pnpm/action-setup@v2
              with:
                  version: 8

            - uses: actions/setup-node@v4
              with:
                  node-version: 18
                  cache: "pnpm"

            - run: pnpm install --frozen-lockfile
            - run: pnpm lint
            - run: pnpm format:check

    # TypeScript type checking
    typecheck:
        name: Type Check
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - uses: pnpm/action-setup@v2
              with:
                  version: 8

            - uses: actions/setup-node@v4
              with:
                  node-version: 18
                  cache: "pnpm"

            - run: pnpm install --frozen-lockfile
            - run: pnpm typecheck

    # Run tests with coverage
    test:
        name: Test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - uses: pnpm/action-setup@v2
              with:
                  version: 8

            - uses: actions/setup-node@v4
              with:
                  node-version: 18
                  cache: "pnpm"

            - run: pnpm install --frozen-lockfile
            - run: pnpm test:coverage

            # Upload coverage to codecov
            - uses: codecov/codecov-action@v3
              with:
                  files: ./coverage/coverage-final.json
                  flags: unittests
                  name: codecov-umbrella
                  fail_ci_if_error: true

    # Build packages
    build:
        name: Build
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [16, 18, 20]
        steps:
            - uses: actions/checkout@v4

            - uses: pnpm/action-setup@v2
              with:
                  version: 8

            - uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: "pnpm"

            - run: pnpm install --frozen-lockfile
            - run: pnpm build

    # Coverage report as PR comment
    coverage-report:
        name: Coverage Report
        runs-on: ubuntu-latest
        needs: [test]
        if: always()
        steps:
            - uses: actions/checkout@v4

            - uses: pnpm/action-setup@v2
              with:
                  version: 8

            - uses: actions/setup-node@v4
              with:
                  node-version: 18
                  cache: "pnpm"

            - run: pnpm install --frozen-lockfile
            - run: pnpm test:coverage

            # Post coverage comment to PR
            - name: Coverage Comment
              uses: romeovs/lcov-reporter-action@v0.3.1
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  lcov-file: ./coverage/lcov.info
                  delete-old-comments: true
                  title: "Coverage Report"

            # Fail if coverage is below threshold
            - name: Check Coverage Threshold
              run: |
                  COVERAGE=$(node -e "
                    const fs = require('fs');
                    const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
                    const lines = coverage.total.lines.pct;
                    const statements = coverage.total.statements.pct;
                    const functions = coverage.total.functions.pct;
                    const branches = coverage.total.branches.pct;
                    const overall = (lines + statements + functions + branches) / 4;
                    console.log(overall.toFixed(2));
                  ")
                  echo "Overall coverage: $COVERAGE%"
                  if (( $(echo "$COVERAGE < 80" | bc -l) )); then
                    echo "Coverage $COVERAGE% is below threshold (80%)"
                    exit 1
                  fi
                  echo "Coverage $COVERAGE% meets threshold"
